##----EKS CLUSTER OUTPUTS--------###
output "cluster_id" {
  description = "EKS cluster ID."
  value       = var.eks_cluster_encryption ? aws_eks_cluster.eks_cluster_encrypted[0].id : aws_eks_cluster.eks-cluster[0].id
}

output "cluster_name" {
  description = "Kubernetes Cluster Name"
  value       = var.eks_cluster_encryption ? aws_eks_cluster.eks_cluster_encrypted[0].id : aws_eks_cluster.eks-cluster[0].id
}

output "cluster_arn" {
  value = var.eks_cluster_encryption ? aws_eks_cluster.eks_cluster_encrypted[0].arn : aws_eks_cluster.eks-cluster[0].arn
}

output "cluster_endpoint" {
  description = "Endpoint for EKS control plane."
  value       = var.eks_cluster_encryption ? aws_eks_cluster.eks_cluster_encrypted[0].endpoint : aws_eks_cluster.eks-cluster[0].endpoint
}

output "eks_cluster_token" {
  value = "data.aws_eks_cluster_auth.cluster.token"
}

output "cluster_certificate_authority_data" {
  value = var.eks_cluster_encryption ? aws_eks_cluster.eks_cluster_encrypted[0].certificate_authority.0.data : aws_eks_cluster.eks-cluster[0].certificate_authority.0.data
}

output "oidc_provider" {
  value = var.eks_cluster_encryption ? aws_eks_cluster.eks_cluster_encrypted[0].identity.0.oidc.0.issuer : aws_eks_cluster.eks-cluster[0].identity.0.oidc.0.issuer
}

output "oidc_provider_arn" {
  value = aws_iam_openid_connect_provider.cluster.arn
}

output "kubectl_config" {
  description = "kubectl config as generated by the module."
  value       = local_file.kubeconfig
  sensitive   = true
}

output "config_map_aws_auth" {
  description = "A kubernetes configuration to authenticate to this EKS cluster."
  value       = local_file.config_map_aws_auth
  sensitive   = true
}

output "cluster_iam_role_name" {
  value = aws_iam_role.eks-iamcluster-role.name
}

output "cluster_iam_role_arn" {
  value = aws_iam_role.eks-iamcluster-role.arn
}

output "worker_iam_role_arn" {
  value = aws_iam_role.eks-workernode-role.arn
}

output "worker_iam_role_name" {
  value = aws_iam_role.eks-workernode-role.name
}
/* output "cidr_block" {
  value = var.create_vpc == true ? aws_vpc.vpc[0].cidr_block : var.vpc_cidr_block
} */

output "node_group_info" {
  value = aws_eks_node_group.default-worker-nodes-group.resources
}


locals {
  config_map_aws_auth = <<CONFIGMAPAWSAUTH
apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-auth
  namespace: kube-system
data:
  mapRoles: |
    - rolearn: ${aws_iam_role.eks-workernode-role.arn}
      username: system:node:{{EC2PrivateDNSName}}
      groups:
        - system:bootstrappers
        - system:nodes
CONFIGMAPAWSAUTH

  kubeconfig = <<KUBECONFIG
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: ${var.eks_cluster_encryption ? aws_eks_cluster.eks_cluster_encrypted[0].certificate_authority.0.data : aws_eks_cluster.eks-cluster[0].certificate_authority.0.data}
    server: ${var.eks_cluster_encryption ? aws_eks_cluster.eks_cluster_encrypted[0].endpoint : aws_eks_cluster.eks-cluster[0].endpoint}
  name: ${var.eks_cluster_encryption ? aws_eks_cluster.eks_cluster_encrypted[0].arn : aws_eks_cluster.eks-cluster[0].arn}
contexts:
- context:
    cluster: ${var.eks_cluster_encryption ? aws_eks_cluster.eks_cluster_encrypted[0].arn : aws_eks_cluster.eks-cluster[0].arn}
    user: ${var.eks_cluster_encryption ? aws_eks_cluster.eks_cluster_encrypted[0].arn : aws_eks_cluster.eks-cluster[0].arn}
  name: ${var.eks_cluster_encryption ? aws_eks_cluster.eks_cluster_encrypted[0].arn : aws_eks_cluster.eks-cluster[0].arn}
current-context: ${var.eks_cluster_encryption ? aws_eks_cluster.eks_cluster_encrypted[0].arn : aws_eks_cluster.eks-cluster[0].arn}
kind: Config
preferences: {}
users:
- name: ${var.eks_cluster_encryption ? aws_eks_cluster.eks_cluster_encrypted[0].arn : aws_eks_cluster.eks-cluster[0].arn}
  user:
    exec:
      apiVersion: client.authentication.k8s.io/v1beta1
      args:
      - --region
      - ${var.region}
      - eks
      - get-token
      - --cluster-name
      - ${var.cluster_name}
      command: aws
KUBECONFIG
}






###--------VPC OUTPUTS--------###

output "vpc_id" {
  value = aws_vpc.vpc.*.id
}

output "private_subnets" {
  value = aws_subnet.private_subnet.*.id
}

output "nodes_private_subnets" {
  value = aws_subnet.nodes_private_subnet.*.id
}

output "public_subnets" {
  value = aws_subnet.public_subnet.*.id
}

output "security_groups" {
  value = aws_security_group.cluster_security_group.id
}

output "vpc_security_groups" {
  value = aws_security_group.vpc.id
}
